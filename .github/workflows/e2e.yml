name: E2E

on:
  schedule:
    - cron: "0 0,8,16 * * *"
  workflow_dispatch: {}

concurrency:
  group: e2e
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      SITE: ratemate
      ENV: prod
      # Base URL chuẩn
      BASE_URL_PROD: https://store.ratemate.top
      # Đường dẫn auth (nếu site thật khác thì đổi ở đây)
      LOGIN_PATH: /en/login
      REGISTER_PATH: /en/login
      # JUnit bên trong container
      JUNIT_XML: /app/report/junit.xml

      # PHÂN LOẠI ROUTE để tránh SKIP
      PUBLIC_ROUTES: "/,/login"
      PROTECTED_ROUTES: "/store,/product,/QR"

      # Bắt conftest chỉ dùng ENV (bỏ qua YAML)
      DISABLE_SITE_YAML: "1"

      # Credentials cho test login (đặt secrets trong repo của bạn)
      E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Build test image
        run: docker build -t ratemate-tests .

      - name: Run tests (Chromium)
        run: |
          docker rm -f ratemate_e2e 2>/dev/null || true

          # Chạy container, COPY toàn bộ ENV cần thiết vào trong
          docker run --name ratemate_e2e -t --ipc=host --shm-size=1g --user 0:0 \
            -e SITE -e ENV \
            -e BASE_URL_PROD \
            -e BASE_URL="$BASE_URL_PROD" \
            -e LOGIN_PATH -e REGISTER_PATH \
            -e PUBLIC_ROUTES -e PROTECTED_ROUTES \
            -e E2E_EMAIL -e E2E_PASSWORD \
            -e DISABLE_SITE_YAML \
            ratemate-tests \
            bash -lc 'set -e
              echo "[DEBUG] BASE_URL=$BASE_URL BASE_URL_PROD=$BASE_URL_PROD"
              mkdir -p /tmp/pytest_cache /tmp/test-results /app/report
              pytest -vv tests/auth tests/smoke/test_routes.py \
                --browser=chromium \
                -p no:pytest_excel \
                -o cache_dir=/tmp/pytest_cache \
                --output=/tmp/test-results \
                --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
                -o junit_family=xunit2 --junitxml=$JUNIT_XML \
                --html=/app/report/e2e.html --self-contained-html || true
            '

      - name: Copy report out (đúng đường dẫn)
        run: |
          mkdir -p report
          # Chép từng file để KHÔNG tạo thư mục lồng "report/report"
          docker cp ratemate_e2e:/app/report/junit.xml  report/junit.xml  || true
          docker cp ratemate_e2e:/app/report/e2e.html   report/e2e.html   || true
          docker rm -f ratemate_e2e 2>/dev/null || true
          echo "== ls report =="
          ls -la report || true

      - name: Parse JUnit → summary
        id: sum
        run: |
          python - <<'PY'
          import os, json, pathlib, xml.etree.ElementTree as ET
          out = {}
          p = pathlib.Path("report/junit.xml")
          if p.exists():
              try:
                  t = ET.parse(p).getroot()
                  ts = t if t.tag.endswith('testsuite') else t.find('.//testsuite')
                  if ts is not None:
                      def g(a): return int(ts.get(a, "0"))
                      out = {
                          "total": g("tests"),
                          "fail": g("failures"),
                          "error": g("errors"),
                          "skip": g("skipped"),
                          "duration": float(ts.get("time","0") or 0),
                          "fails": [],
                      }
                      for tc in ts.findall(".//testcase"):
                          fe = tc.find("failure") or tc.find("error")
                          if fe is not None:
                              name = f"{tc.get('classname','')}.{tc.get('name')}"
                              msg  = (fe.get("message") or "").strip()
                              txt  = (fe.text or "").strip()
                              out["fails"].append({"name": name, "reason": (msg or txt or 'No message')[:400]})
              except Exception:
                  out = {}
          # chỉ set output khi có dữ liệu hợp lệ; nếu rỗng => để biến output rỗng
          val = json.dumps(out, ensure_ascii=False) if out else ""
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"summary_json={val}\n")
          PY

      # Gửi Telegram bằng Python (requests)
      - name: Setup Python for notification
        if: always()
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install notify deps
        if: always()
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Send Telegram (message via Python)
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_PROXY:     ${{ secrets.TELEGRAM_PROXY }}
          SUMMARY_JSON:       ${{ steps.sum.outputs.summary_json }}
          JUNIT_XML:          report/junit.xml
        run: |
          python Ci/report_telegram.py

      - name: Send Telegram (attach HTML report)
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_PROXY:     ${{ secrets.TELEGRAM_PROXY }}
        run: |
          python - <<'PY'
          import os, requests, os.path
          px = os.getenv("TELEGRAM_PROXY") or os.getenv("HTTPS_PROXY") or os.getenv("HTTP_PROXY")
          if px and not (px.startswith("http") or px.startswith("socks")):
              px = "http://" + px
          proxies = {"http": px, "https": px} if px else None

          tok = os.environ["TELEGRAM_BOT_TOKEN"]
          chat = os.environ["TELEGRAM_CHAT_ID"]
          path = "report/e2e.html"
          if not os.path.isfile(path):
              print("No HTML report to attach.")
              raise SystemExit(0)

          with open(path, "rb") as f:
              files = {"document": ("e2e.html", f, "text/html")}
              data  = {"chat_id": chat, "caption": "E2E report"}
              r = requests.post(f"https://api.telegram.org/bot{tok}/sendDocument",
                                data=data, files=files, timeout=60, proxies=proxies)
              r.raise_for_status()
              print("Telegram document sent.")
          PY

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report
          path: report/