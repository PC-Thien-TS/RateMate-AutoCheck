name: E2E

on:
  schedule:
    # 06:00 Asia/Ho_Chi_Minh (UTC+7) => 23:00 UTC (previous day)
    - cron: '0 23 * * *'
    # 18:00 Asia/Ho_Chi_Minh (UTC+7) => 11:00 UTC
    - cron: '0 11 * * *'
  workflow_dispatch:
    inputs:
      site:
        description: "SITE code (matches config/sites.yaml)"
        required: false
        default: "ratemate"
      base_url:
        description: "Base URL to test"
        required: false
        default: "https://store.ratemate.top"
      login_path:
        description: "Login path (override)"
        required: false
        default: ""
      register_path:
        description: "Register path (override)"
        required: false
        default: ""
      browsers:
        description: "Browsers to run (comma-separated)"
        required: false
        default: "chromium,webkit"
      run_login_success:
        description: "Run login_success test (true/false)"
        required: false
        default: "false"
      run_write:
        description: "Run write tests (danger)"
        required: false
        default: "false"
      discover_urls:
        description: "Newline-separated URLs to auto-discover + generate tests"
        required: false
        default: ""
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

env:
  SITE_INPUT: ${{ github.event.inputs.site }}
  BASE_URL_INPUT: ${{ github.event.inputs.base_url }}
  LOGIN_PATH_INPUT: ${{ github.event.inputs.login_path }}
  REGISTER_PATH_INPUT: ${{ github.event.inputs.register_path }}
  BROWSERS_INPUT: ${{ github.event.inputs.browsers }}
  RUN_LOGIN_SUCCESS: ${{ github.event.inputs.run_login_success || vars.RUN_LOGIN_SUCCESS || 'false' }}
  DISCOVER_URLS: ${{ github.event.inputs.discover_urls }}
  RUN_WRITE: ${{ github.event.inputs.run_write || 'false' }}

jobs:
  smoke:
    name: Smoke (${{ matrix.site }} â€¢ ${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    # For schedule events, github.event.inputs is null; rely on env.DISCOVER_URLS
    if: ${{ env.DISCOVER_URLS == '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - site: ratemate
            browser: chromium
            base_url: https://store.ratemate.top
            login_path: /login
              env:
      SITE: ${{ env.SITE_INPUT || matrix.site || vars.SITE || 'ratemate' }}
      BASE_URL: ${{ env.BASE_URL_INPUT || matrix.base_url || vars.BASE_URL || secrets.BASE_URL || 'https://store.ratemate.top' }}
      LOGIN_PATH: ${{ env.LOGIN_PATH_INPUT || matrix.login_path || vars.LOGIN_PATH || secrets.LOGIN_PATH || '' }}
      REGISTER_PATH: ${{ env.REGISTER_PATH_INPUT || matrix.register_path || vars.REGISTER_PATH || secrets.REGISTER_PATH || '' }}
      E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      JUNIT_XML: report/junit.xml
    steps:
      - uses: actions/checkout@v4
      - name: Detect project dir
        id: detect
        run: |
          if [ -f requirements.txt ] && [ -d tests ]; then echo WORKDIR=. >> $GITHUB_ENV; else echo WORKDIR=. >> $GITHUB_ENV; fi
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-1.55.0
          restore-keys: ${{ runner.os }}-ms-playwright-
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-1.55.0
          restore-keys: ${{ runner.os }}-ms-playwright-
      - name: Install deps
        working-directory: ${{ env.WORKDIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pre-commit
        working-directory: ${{ env.WORKDIR }}
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Install Playwright
        working-directory: ${{ env.WORKDIR }}
        run: python -m playwright install --with-deps ${{ matrix.browser }}
      - name: Preflight base URL
        id: preflight
        working-directory: ${{ env.WORKDIR }}
        run: |
          set +e
          if command -v curl >/dev/null 2>&1; then curl -I -sS -m 5 "$BASE_URL" >/dev/null; ok=$?; else ok=0; fi
          if [ "$ok" -ne 0 ]; then echo ok=false >> $GITHUB_OUTPUT; else echo ok=true >> $GITHUB_OUTPUT; fi
      - name: Run smoke tests
        if: ${{ steps.preflight.outputs.ok == 'true' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          mkdir -p report test-results
          EXTRA="smoke and not write"
          if [ "${RUN_LOGIN_SUCCESS}" != "true" ]; then EXTRA="$EXTRA and not test_login_success"; fi
          pytest -vv -m "$EXTRA" tests \
            --browser=${{ matrix.browser }} \
            --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
            --junitxml=${{ env.JUNIT_XML }} \
            --reruns 1 --reruns-delay 1
      - name: Send Telegram report
        if: ${{ always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python Ci/report_telegram.py || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: smoke-artifacts-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            ${{ env.WORKDIR }}/report/**
            ${{ env.WORKDIR }}/test-results/**
          if-no-files-found: warn

  roles:
    name: Roles (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    if: ${{ env.DISCOVER_URLS == '' }}
    needs: smoke
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
    env:
      SITE: ${{ env.SITE_INPUT || vars.SITE || 'ratemate' }}
      BASE_URL: ${{ env.BASE_URL_INPUT || vars.BASE_URL || secrets.BASE_URL || 'https://store.ratemate.top' }}
      LOGIN_PATH: ${{ env.LOGIN_PATH_INPUT || vars.LOGIN_PATH || secrets.LOGIN_PATH || '' }}
      REGISTER_PATH: ${{ env.REGISTER_PATH_INPUT || vars.REGISTER_PATH || secrets.REGISTER_PATH || '' }}
      E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      JUNIT_XML: report/junit.xml
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-1.55.0
          restore-keys: ${{ runner.os }}-ms-playwright-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Install Playwright
        run: python -m playwright install --with-deps ${{ matrix.browser }}
      - name: Run role tests (skip if missing creds)
        run: |
          mkdir -p report test-results
          pytest -vv -m "roles and not write" tests \
            --browser=${{ matrix.browser }} \
            --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
            --junitxml=${{ env.JUNIT_XML }} \
            --reruns 1 --reruns-delay 1 || true
      - name: Send Telegram report
        if: ${{ always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python Ci/report_telegram.py || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: roles-artifacts-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            report/**
            test-results/**
          if-no-files-found: warn

  write:
    name: Write (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    if: ${{ github.event.inputs.run_write == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
    env:
      SITE: ${{ env.SITE_INPUT || vars.SITE || 'ratemate' }}
      BASE_URL: ${{ env.BASE_URL_INPUT || vars.BASE_URL || secrets.BASE_URL || 'https://store.ratemate.top' }}
      LOGIN_PATH: ${{ env.LOGIN_PATH_INPUT || vars.LOGIN_PATH || secrets.LOGIN_PATH || '' }}
      REGISTER_PATH: ${{ env.REGISTER_PATH_INPUT || vars.REGISTER_PATH || secrets.REGISTER_PATH || '' }}
      E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      E2E_ALLOW_WRITE: "1"
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      JUNIT_XML: report/junit.xml
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-1.55.0
          restore-keys: ${{ runner.os }}-ms-playwright-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Install Playwright
        run: python -m playwright install --with-deps ${{ matrix.browser }}
      - name: Run write tests
        run: |
          mkdir -p report test-results
          pytest -vv -m write tests \
            --browser=${{ matrix.browser }} \
            --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
            --junitxml=${{ env.JUNIT_XML }}
      - name: Send Telegram report
        if: ${{ always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python Ci/report_telegram.py || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: write-artifacts-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            report/**
            test-results/**
          if-no-files-found: warn

  discover:
    name: Discover & Run Generated
    runs-on: ubuntu-latest
    timeout-minutes: 35
    if: ${{ env.DISCOVER_URLS != '' }}
    env:
      SITE: ${{ env.SITE_INPUT || vars.SITE || 'ratemate' }}
      BASE_URL: ${{ env.BASE_URL_INPUT || vars.BASE_URL || secrets.BASE_URL || 'https://store.ratemate.top' }}
      LOGIN_PATH: ${{ env.LOGIN_PATH_INPUT || vars.LOGIN_PATH || secrets.LOGIN_PATH || '' }}
      REGISTER_PATH: ${{ env.REGISTER_PATH_INPUT || vars.REGISTER_PATH || secrets.REGISTER_PATH || '' }}
      E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      DISCOVER_URLS: ${{ env.DISCOVER_URLS }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      JUNIT_XML: report/junit.xml
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Install Playwright
        run: python -m playwright install --with-deps chromium
      - name: Discover URLs and generate tests
        run: |
          echo "Discover list:"; printf '%s\n' "$DISCOVER_URLS"
          mkdir -p tests/generated report/discover
          while IFS= read -r URL; do
            [ -z "$URL" ] && continue
            echo "Discovering: $URL"
            python tools/discover_routes.py --url "$URL" --login-first --emit-tests --emit-yaml --screenshot-dir report/discover || true
          done << 'EOF'
          ${{ env.DISCOVER_URLS }}
          EOF
      - name: Run generated tests
        run: |
          set -e
          ls -la tests/generated || true
          for f in tests/generated/test_*_routes_generated.py; do
            [ -f "$f" ] || continue
            site=$(basename "$f" | sed -E 's/^test_(.+)_routes_generated\.py$/\1/')
            echo "Running generated: $f (SITE=$site)"
            SITE="$site" pytest -vv "$f" --browser=chromium \
              --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
              --junitxml=${{ env.JUNIT_XML }} --reruns 1 --reruns-delay 1 || true
          done
      - name: Send Telegram report
        if: ${{ always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python Ci/report_telegram.py || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: discover-artifacts-${{ github.run_number }}
          path: |
            report/**
            tests/generated/**
          if-no-files-found: warn
