name: E2E

on:
  # chạy 3 lần/ngày (UTC 01:00, 05:00, 09:00) — chỉnh lịch theo nhu cầu
  schedule:
    - cron: "0 1,5,9 * * *"
  workflow_dispatch: {}

concurrency:
  group: e2e
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SITE: ratemate
      ENV: prod
      BASE_URL_PROD: https://store.ratemate.top
      LOGIN_PATH: /en/login
      REGISTER_PATH: /en/login
      JUNIT_XML: /app/report/junit.xml
      # mở rộng case qua ENV (tuỳ chọn)
      PUBLIC_ROUTES: "/,/login,/product,/QR,/about,/contact"
      PROTECTED_ROUTES: "/store,/profile,/wallet,/orders,/cart,/checkout,/address"
      ROUTE_LOCALES: "en,vi"
      NAV_TIMEOUT_MS: "60000"

    steps:
      - uses: actions/checkout@v4

      - name: Build test image
        run: docker build -t ratemate-tests .

      - name: Run tests (Chromium)
        run: |
          docker rm -f ratemate_e2e 2>/dev/null || true
          docker run --name ratemate_e2e -t --ipc=host --shm-size=1g --user 0:0 \
            -e SITE -e ENV -e BASE_URL_PROD -e LOGIN_PATH -e REGISTER_PATH \
            -e PUBLIC_ROUTES -e PROTECTED_ROUTES -e ROUTE_LOCALES -e NAV_TIMEOUT_MS \
            ratemate-tests \
            bash -lc "mkdir -p /tmp/pytest_cache /tmp/test-results /app/report && \
              pytest -vv tests/auth tests/smoke/test_routes.py \
                --browser=chromium \
                -p no:pytest_excel \
                -o cache_dir=/tmp/pytest_cache \
                --output=/tmp/test-results \
                --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
                -o junit_family=xunit2 --junitxml=$JUNIT_XML \
                --html=/app/report/e2e.html --self-contained-html || true"

      - name: Copy report out
        run: |
          mkdir -p report
          docker cp ratemate_e2e:/app/report ./report || true
          docker rm -f ratemate_e2e 2>/dev/null || true
          ls -la report || true

      - name: Parse JUnit → summary
        id: sum
        run: |
          python - <<'PY'
          import os, json, pathlib, xml.etree.ElementTree as ET
          out = {}
          p = pathlib.Path("report/junit.xml")
          if p.exists():
              t = ET.parse(p).getroot()
              ts = t if t.tag.endswith('testsuite') else t.find('.//testsuite')
              def g(a): return int(ts.get(a, "0"))
              out = {"total": g("tests"), "fail": g("failures"), "error": g("errors"),
                     "skip": g("skipped"), "duration": float(ts.get("time","0")), "fails":[]}
              for tc in ts.findall(".//testcase"):
                  fe = tc.find("failure") or tc.find("error")
                  if fe is not None:
                      name = f"{tc.get('classname','')}.{tc.get('name')}"
                      msg  = (fe.get("message") or "").strip()
                      txt  = (fe.text or "").strip()
                      out["fails"].append({"name": name, "reason": (msg or txt or 'No message')[:400]})
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write("summary_json<<EOF\n")
              fh.write(json.dumps(out, ensure_ascii=False))
              fh.write("\nEOF\n")
          PY

      - name: Send Telegram (message via Python)
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_PROXY:     ${{ secrets.TELEGRAM_PROXY }}  # có thể để trống
          SUMMARY_JSON:       ${{ steps.sum.outputs.summary_json }}
          JUNIT_XML:          report/junit.xml
        run: python ci/report_telegram.py

      - name: Send Telegram (attach HTML report)
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_PROXY:     ${{ secrets.TELEGRAM_PROXY }}
        run: |
          if [ -f "report/e2e.html" ]; then
            if [ -n "${TELEGRAM_PROXY}" ]; then
              curl -x "${TELEGRAM_PROXY}" -sS -m 60 -F chat_id="${TELEGRAM_CHAT_ID}" \
                   -F document="@report/e2e.html;type=text/html;filename=e2e.html" \
                   -F caption="E2E report • $(date -u +%Y-%m-%dT%H:%MZ)" \
                   "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument"
            else
              curl -sS -m 60 -F chat_id="${TELEGRAM_CHAT_ID}" \
                   -F document="@report/e2e.html;type=text/html;filename=e2e.html" \
                   -F caption="E2E report • $(date -u +%Y-%m-%dT%H:%MZ)" \
                   "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument"
            fi
          fi

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report
          path: report/
