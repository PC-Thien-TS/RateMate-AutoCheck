name: E2E (common)

on:
  workflow_call:
    inputs:
      site:
        description: SITE code
        required: true
        type: string
      base_url:
        description: Base URL to test (no trailing slash)
        required: true
        type: string
      login_path:
        description: Login path
        required: true
        type: string
      register_path:
        description: Register path
        required: false
        default: ""
        type: string
      browsers:
        description: Browsers to run (comma-separated)
        required: false
        default: "chromium"
        type: string
      run_login_success:
        description: Run login_success test
        required: false
        default: false
        type: boolean
    secrets:
      E2E_EMAIL:
        required: false
      E2E_PASSWORD:
        required: false
      TELEGRAM_BOT_TOKEN:
        required: false
      TELEGRAM_CHAT_ID:
        required: false

jobs:
  smoke:
    name: Smoke (${{ inputs.site }} Â· ${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJSON(format('["{0}"]', join(inputs.browsers, '" , "'))) }}
    env:
      SITE: ${{ inputs.site }}
      BASE_URL: ${{ inputs.base_url }}
      LOGIN_PATH: ${{ inputs.login_path }}
      REGISTER_PATH: ${{ inputs.register_path }}
      ALT_LOGIN_PATH: "/login"
      RUN_LOGIN_SUCCESS: ${{ inputs.run_login_success }}
      E2E_EMAIL: ${{ secrets.E2E_EMAIL }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      JUNIT_XML: report/junit.xml
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Preflight base URL
        id: preflight
        run: |
          set +e
          if command -v curl >/dev/null 2>&1; then curl -I -L -sS -m 8 "$BASE_URL" >/dev/null; ok=$?; else ok=0; fi
          if [ "$ok" -ne 0 ]; then echo ok=false >> $GITHUB_OUTPUT; else echo ok=true >> $GITHUB_OUTPUT; fi
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-1.55.0
          restore-keys: ${{ runner.os }}-ms-playwright-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install Playwright
        run: python -m playwright install --with-deps ${{ matrix.browser }}
      - name: Unset creds when not running login
        run: |
          if [ "${RUN_LOGIN_SUCCESS}" != "true" ]; then
            echo "E2E_EMAIL=" >> $GITHUB_ENV
            echo "E2E_PASSWORD=" >> $GITHUB_ENV
          fi
      - name: Run smoke tests
        if: ${{ steps.preflight.outputs.ok == 'true' }}
        run: |
          mkdir -p report test-results
          EXTRA="smoke and not write"
          if [ "${RUN_LOGIN_SUCCESS}" != "true" ]; then EXTRA="$EXTRA and not test_login_success"; fi
          pytest -vv -m "$EXTRA" tests \
            --browser=${{ matrix.browser }} \
            --screenshot=only-on-failure --video=off --tracing=retain-on-failure \
            --junitxml=${{ env.JUNIT_XML }} \
            --reruns 1 --reruns-delay 1
      - name: Export coverage summary
        run: |
          python tools/export_coverage.py --site "$SITE" --junit "$JUNIT_XML" --out report || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: smoke-artifacts-${{ inputs.site }}-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            report/**
            test-results/**
          if-no-files-found: warn
      - name: Send Telegram report
        if: ${{ always() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python Ci/report_telegram.py || true
