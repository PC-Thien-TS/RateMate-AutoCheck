# Auto-generated by tools/discover_routes.py
# -*- coding: utf-8 -*-
import re
import contextlib
import pytest
from pages.auth.login_page import LoginPage

SITE_KEY = 'ratemate_app2'
BASE_URL_DISCOVERED = 'https://app2.ratemate.top'
LOGIN_PATH_DISCOVERED = '/en/login'
PUBLIC_ROUTES = []
PROTECTED_ROUTES = ['/en/login']


def _maybe_login(page, base_url, login_path, email, password):
    if not (email and password):
        return
    lp = LoginPage(page, base_url, login_path)
    lp.goto(); lp.login(email, password)
    with contextlib.suppress(Exception):
        page.wait_for_load_state("domcontentloaded", timeout=8000)
        page.wait_for_timeout(200)


@pytest.mark.smoke
@pytest.mark.parametrize("path", PUBLIC_ROUTES)
def test_public_routes_open(new_page, site, base_url, path):
    if str(site).strip().lower() != SITE_KEY:
        pytest.skip("Different site")
    url = f"{base_url.rstrip('/')}{path}"
    try:
        new_page.set_default_navigation_timeout(30000)
        new_page.goto(url, wait_until="domcontentloaded")
        with contextlib.suppress(Exception):
            new_page.wait_for_timeout(200)
        assert new_page.url.startswith(base_url), f"Unexpected navigation for {path} -> {new_page.url}"
    except Exception as e:
        pytest.skip(f"unreachable {url}: {e}")


@pytest.mark.smoke
@pytest.mark.parametrize("path", PROTECTED_ROUTES)
def test_protected_routes_behavior(new_page, site, base_url, path):
    if str(site).strip().lower() != SITE_KEY:
        pytest.skip("Different site")
    import os
    email = os.getenv("E2E_EMAIL")
    password = os.getenv("E2E_PASSWORD")
    _maybe_login(new_page, base_url, LOGIN_PATH_DISCOVERED, email, password)
    url = f"{base_url.rstrip('/')}{path}"
    try:
        new_page.set_default_navigation_timeout(30000)
        new_page.goto(url, wait_until="domcontentloaded")
        with contextlib.suppress(Exception):
            new_page.wait_for_timeout(200)
        # If logged in, should not be at login page. If not logged in, allow redirect to login.
        at_login = bool(re.search(r"/(log[-_]?in|sign[-_]?in)(/|\?|$)", new_page.url, re.I))
        if email and password:
            assert not at_login, f"Logged in but redirected to login for {path}: {new_page.url}"
        else:
            assert at_login or base_url in new_page.url, f"Expected login redirect for {path}"
    except Exception as e:
        pytest.skip(f"unreachable {url}: {e}")
